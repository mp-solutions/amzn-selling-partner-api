<?php
/**
 * MFfAdditionalSellerInputTest
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  MPSolutions\AmznSellingPartnerApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Selling Partner API for Merchant Fulfillment
 *
 * The Selling Partner API for Merchant Fulfillment helps you build applications that let sellers purchase shipping for non-Prime and Prime orders using Amazonâ€™s Buy Shipping Services.
 *
 * The version of the OpenAPI document: v0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace MPSolutions\AmznSellingPartnerApi\Test\Model;

use PHPUnit\Framework\TestCase;

/**
 * MFfAdditionalSellerInputTest Class Doc Comment
 *
 * @category    Class
 * @description Additional information required to purchase shipping.
 * @package     MPSolutions\AmznSellingPartnerApi
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class MFfAdditionalSellerInputTest extends TestCase
{

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test "MFfAdditionalSellerInput"
     */
    public function testMFfAdditionalSellerInput()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "data_type"
     */
    public function testPropertyDataType()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "value_as_string"
     */
    public function testPropertyValueAsString()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "value_as_boolean"
     */
    public function testPropertyValueAsBoolean()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "value_as_integer"
     */
    public function testPropertyValueAsInteger()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "value_as_timestamp"
     */
    public function testPropertyValueAsTimestamp()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "value_as_address"
     */
    public function testPropertyValueAsAddress()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "value_as_weight"
     */
    public function testPropertyValueAsWeight()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "value_as_dimension"
     */
    public function testPropertyValueAsDimension()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "value_as_currency"
     */
    public function testPropertyValueAsCurrency()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}
