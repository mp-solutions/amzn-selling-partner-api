<?php
/**
 * FfI20240320Box
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MPSolutions\AmznSellingPartnerApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * The Selling Partner API for FBA inbound operations.
 *
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * The version of the OpenAPI document: 2024-03-20
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MPSolutions\AmznSellingPartnerApi\Models\FulfillmentInbound20240320;

use \ArrayAccess;
use \MPSolutions\AmznSellingPartnerApi\Models\ModelInterface;
use \MPSolutions\AmznSellingPartnerApi\ObjectSerializer;

/**
 * FfI20240320Box Class Doc Comment
 *
 * @category Class
 * @description Contains information about a box that is used in the inbound plan. The box is a container that holds multiple items.
 * @package  MPSolutions\AmznSellingPartnerApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class FfI20240320Box implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Box';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'box_id' => 'string',
        'content_information_source' => '\MPSolutions\AmznSellingPartnerApi\Models\FulfillmentInbound20240320\FfI20240320BoxContentInformationSource',
        'destination_region' => '\MPSolutions\AmznSellingPartnerApi\Models\FulfillmentInbound20240320\FfI20240320Region',
        'dimensions' => '\MPSolutions\AmznSellingPartnerApi\Models\FulfillmentInbound20240320\FfI20240320Dimensions',
        'external_container_identifier' => 'string',
        'external_container_identifier_type' => 'string',
        'items' => '\MPSolutions\AmznSellingPartnerApi\Models\FulfillmentInbound20240320\FfI20240320Item[]',
        'package_id' => 'string',
        'quantity' => 'int',
        'template_name' => 'string',
        'weight' => '\MPSolutions\AmznSellingPartnerApi\Models\FulfillmentInbound20240320\FfI20240320Weight'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'box_id' => null,
        'content_information_source' => null,
        'destination_region' => null,
        'dimensions' => null,
        'external_container_identifier' => null,
        'external_container_identifier_type' => null,
        'items' => null,
        'package_id' => null,
        'quantity' => null,
        'template_name' => null,
        'weight' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'box_id' => 'boxId',
        'content_information_source' => 'contentInformationSource',
        'destination_region' => 'destinationRegion',
        'dimensions' => 'dimensions',
        'external_container_identifier' => 'externalContainerIdentifier',
        'external_container_identifier_type' => 'externalContainerIdentifierType',
        'items' => 'items',
        'package_id' => 'packageId',
        'quantity' => 'quantity',
        'template_name' => 'templateName',
        'weight' => 'weight'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'box_id' => 'setBoxId',
        'content_information_source' => 'setContentInformationSource',
        'destination_region' => 'setDestinationRegion',
        'dimensions' => 'setDimensions',
        'external_container_identifier' => 'setExternalContainerIdentifier',
        'external_container_identifier_type' => 'setExternalContainerIdentifierType',
        'items' => 'setItems',
        'package_id' => 'setPackageId',
        'quantity' => 'setQuantity',
        'template_name' => 'setTemplateName',
        'weight' => 'setWeight'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'box_id' => 'getBoxId',
        'content_information_source' => 'getContentInformationSource',
        'destination_region' => 'getDestinationRegion',
        'dimensions' => 'getDimensions',
        'external_container_identifier' => 'getExternalContainerIdentifier',
        'external_container_identifier_type' => 'getExternalContainerIdentifierType',
        'items' => 'getItems',
        'package_id' => 'getPackageId',
        'quantity' => 'getQuantity',
        'template_name' => 'getTemplateName',
        'weight' => 'getWeight'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['box_id'] = $data['box_id'] ?? null;
        $this->container['content_information_source'] = $data['content_information_source'] ?? null;
        $this->container['destination_region'] = $data['destination_region'] ?? null;
        $this->container['dimensions'] = $data['dimensions'] ?? null;
        $this->container['external_container_identifier'] = $data['external_container_identifier'] ?? null;
        $this->container['external_container_identifier_type'] = $data['external_container_identifier_type'] ?? null;
        $this->container['items'] = $data['items'] ?? null;
        $this->container['package_id'] = $data['package_id'] ?? null;
        $this->container['quantity'] = $data['quantity'] ?? null;
        $this->container['template_name'] = $data['template_name'] ?? null;
        $this->container['weight'] = $data['weight'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['box_id']) && (mb_strlen($this->container['box_id']) > 1024)) {
            $invalidProperties[] = "invalid value for 'box_id', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['box_id']) && (mb_strlen($this->container['box_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'box_id', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['external_container_identifier']) && (mb_strlen($this->container['external_container_identifier']) > 1024)) {
            $invalidProperties[] = "invalid value for 'external_container_identifier', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['external_container_identifier']) && (mb_strlen($this->container['external_container_identifier']) < 1)) {
            $invalidProperties[] = "invalid value for 'external_container_identifier', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['external_container_identifier_type']) && (mb_strlen($this->container['external_container_identifier_type']) > 1024)) {
            $invalidProperties[] = "invalid value for 'external_container_identifier_type', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['external_container_identifier_type']) && (mb_strlen($this->container['external_container_identifier_type']) < 1)) {
            $invalidProperties[] = "invalid value for 'external_container_identifier_type', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['package_id'] === null) {
            $invalidProperties[] = "'package_id' can't be null";
        }
        if ((mb_strlen($this->container['package_id']) > 38)) {
            $invalidProperties[] = "invalid value for 'package_id', the character length must be smaller than or equal to 38.";
        }

        if ((mb_strlen($this->container['package_id']) < 38)) {
            $invalidProperties[] = "invalid value for 'package_id', the character length must be bigger than or equal to 38.";
        }

        if (!preg_match("/^[a-zA-Z0-9-]*$/", $this->container['package_id'])) {
            $invalidProperties[] = "invalid value for 'package_id', must be conform to the pattern /^[a-zA-Z0-9-]*$/.";
        }

        if (!is_null($this->container['quantity']) && ($this->container['quantity'] > 10000)) {
            $invalidProperties[] = "invalid value for 'quantity', must be smaller than or equal to 10000.";
        }

        if (!is_null($this->container['quantity']) && ($this->container['quantity'] < 1)) {
            $invalidProperties[] = "invalid value for 'quantity', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['template_name']) && (mb_strlen($this->container['template_name']) > 1024)) {
            $invalidProperties[] = "invalid value for 'template_name', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['template_name']) && (mb_strlen($this->container['template_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'template_name', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets box_id
     *
     * @return string|null
     */
    public function getBoxId()
    {
        return $this->container['box_id'];
    }

    /**
     * Sets box_id
     *
     * @param string|null $box_id The ID provided by Amazon that identifies a given box. This ID is comprised of the external shipment ID (which is generated after transportation has been confirmed) and the index of the box.
     *
     * @return self
     */
    public function setBoxId($box_id)
    {
        if (!is_null($box_id) && (mb_strlen($box_id) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $box_id when calling FfI20240320Box., must be smaller than or equal to 1024.');
        }
        if (!is_null($box_id) && (mb_strlen($box_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $box_id when calling FfI20240320Box., must be bigger than or equal to 1.');
        }

        $this->container['box_id'] = $box_id;

        return $this;
    }

    /**
     * Gets content_information_source
     *
     * @return \MPSolutions\AmznSellingPartnerApi\Models\FulfillmentInbound20240320\FfI20240320BoxContentInformationSource|null
     */
    public function getContentInformationSource()
    {
        return $this->container['content_information_source'];
    }

    /**
     * Sets content_information_source
     *
     * @param \MPSolutions\AmznSellingPartnerApi\Models\FulfillmentInbound20240320\FfI20240320BoxContentInformationSource|null $content_information_source content_information_source
     *
     * @return self
     */
    public function setContentInformationSource($content_information_source)
    {
        $this->container['content_information_source'] = $content_information_source;

        return $this;
    }

    /**
     * Gets destination_region
     *
     * @return \MPSolutions\AmznSellingPartnerApi\Models\FulfillmentInbound20240320\FfI20240320Region|null
     */
    public function getDestinationRegion()
    {
        return $this->container['destination_region'];
    }

    /**
     * Sets destination_region
     *
     * @param \MPSolutions\AmznSellingPartnerApi\Models\FulfillmentInbound20240320\FfI20240320Region|null $destination_region destination_region
     *
     * @return self
     */
    public function setDestinationRegion($destination_region)
    {
        $this->container['destination_region'] = $destination_region;

        return $this;
    }

    /**
     * Gets dimensions
     *
     * @return \MPSolutions\AmznSellingPartnerApi\Models\FulfillmentInbound20240320\FfI20240320Dimensions|null
     */
    public function getDimensions()
    {
        return $this->container['dimensions'];
    }

    /**
     * Sets dimensions
     *
     * @param \MPSolutions\AmznSellingPartnerApi\Models\FulfillmentInbound20240320\FfI20240320Dimensions|null $dimensions dimensions
     *
     * @return self
     */
    public function setDimensions($dimensions)
    {
        $this->container['dimensions'] = $dimensions;

        return $this;
    }

    /**
     * Gets external_container_identifier
     *
     * @return string|null
     */
    public function getExternalContainerIdentifier()
    {
        return $this->container['external_container_identifier'];
    }

    /**
     * Sets external_container_identifier
     *
     * @param string|null $external_container_identifier The external identifier for this container / box.
     *
     * @return self
     */
    public function setExternalContainerIdentifier($external_container_identifier)
    {
        if (!is_null($external_container_identifier) && (mb_strlen($external_container_identifier) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $external_container_identifier when calling FfI20240320Box., must be smaller than or equal to 1024.');
        }
        if (!is_null($external_container_identifier) && (mb_strlen($external_container_identifier) < 1)) {
            throw new \InvalidArgumentException('invalid length for $external_container_identifier when calling FfI20240320Box., must be bigger than or equal to 1.');
        }

        $this->container['external_container_identifier'] = $external_container_identifier;

        return $this;
    }

    /**
     * Gets external_container_identifier_type
     *
     * @return string|null
     */
    public function getExternalContainerIdentifierType()
    {
        return $this->container['external_container_identifier_type'];
    }

    /**
     * Sets external_container_identifier_type
     *
     * @param string|null $external_container_identifier_type Type of the external identifier used. Can be: `AMAZON`, `SSCC`.
     *
     * @return self
     */
    public function setExternalContainerIdentifierType($external_container_identifier_type)
    {
        if (!is_null($external_container_identifier_type) && (mb_strlen($external_container_identifier_type) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $external_container_identifier_type when calling FfI20240320Box., must be smaller than or equal to 1024.');
        }
        if (!is_null($external_container_identifier_type) && (mb_strlen($external_container_identifier_type) < 1)) {
            throw new \InvalidArgumentException('invalid length for $external_container_identifier_type when calling FfI20240320Box., must be bigger than or equal to 1.');
        }

        $this->container['external_container_identifier_type'] = $external_container_identifier_type;

        return $this;
    }

    /**
     * Gets items
     *
     * @return \MPSolutions\AmznSellingPartnerApi\Models\FulfillmentInbound20240320\FfI20240320Item[]|null
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     *
     * @param \MPSolutions\AmznSellingPartnerApi\Models\FulfillmentInbound20240320\FfI20240320Item[]|null $items Items contained within the box.
     *
     * @return self
     */
    public function setItems($items)
    {
        $this->container['items'] = $items;

        return $this;
    }

    /**
     * Gets package_id
     *
     * @return string
     */
    public function getPackageId()
    {
        return $this->container['package_id'];
    }

    /**
     * Sets package_id
     *
     * @param string $package_id Primary key to uniquely identify a Package (Box or Pallet).
     *
     * @return self
     */
    public function setPackageId($package_id)
    {
        if ((mb_strlen($package_id) > 38)) {
            throw new \InvalidArgumentException('invalid length for $package_id when calling FfI20240320Box., must be smaller than or equal to 38.');
        }
        if ((mb_strlen($package_id) < 38)) {
            throw new \InvalidArgumentException('invalid length for $package_id when calling FfI20240320Box., must be bigger than or equal to 38.');
        }
        if ((!preg_match("/^[a-zA-Z0-9-]*$/", $package_id))) {
            throw new \InvalidArgumentException("invalid value for $package_id when calling FfI20240320Box., must conform to the pattern /^[a-zA-Z0-9-]*$/.");
        }

        $this->container['package_id'] = $package_id;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int|null
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int|null $quantity The number of containers where all other properties like weight or dimensions are identical.
     *
     * @return self
     */
    public function setQuantity($quantity)
    {

        if (!is_null($quantity) && ($quantity > 10000)) {
            throw new \InvalidArgumentException('invalid value for $quantity when calling FfI20240320Box., must be smaller than or equal to 10000.');
        }
        if (!is_null($quantity) && ($quantity < 1)) {
            throw new \InvalidArgumentException('invalid value for $quantity when calling FfI20240320Box., must be bigger than or equal to 1.');
        }

        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets template_name
     *
     * @return string|null
     */
    public function getTemplateName()
    {
        return $this->container['template_name'];
    }

    /**
     * Sets template_name
     *
     * @param string|null $template_name Template name of the box.
     *
     * @return self
     */
    public function setTemplateName($template_name)
    {
        if (!is_null($template_name) && (mb_strlen($template_name) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $template_name when calling FfI20240320Box., must be smaller than or equal to 1024.');
        }
        if (!is_null($template_name) && (mb_strlen($template_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $template_name when calling FfI20240320Box., must be bigger than or equal to 1.');
        }

        $this->container['template_name'] = $template_name;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return \MPSolutions\AmznSellingPartnerApi\Models\FulfillmentInbound20240320\FfI20240320Weight|null
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param \MPSolutions\AmznSellingPartnerApi\Models\FulfillmentInbound20240320\FfI20240320Weight|null $weight weight
     *
     * @return self
     */
    public function setWeight($weight)
    {
        $this->container['weight'] = $weight;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


