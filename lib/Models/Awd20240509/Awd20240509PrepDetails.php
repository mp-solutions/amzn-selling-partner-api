<?php
/**
 * Awd20240509PrepDetails
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MPSolutions\AmznSellingPartnerApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * The Selling Partner API for Amazon Warehousing and Distribution
 *
 * The Selling Partner API for Amazon Warehousing and Distribution (AWD) provides programmatic access to information about AWD shipments and inventory.
 *
 * The version of the OpenAPI document: 2024-05-09
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MPSolutions\AmznSellingPartnerApi\Models\Awd20240509;

use \ArrayAccess;
use \MPSolutions\AmznSellingPartnerApi\Models\ModelInterface;
use \MPSolutions\AmznSellingPartnerApi\ObjectSerializer;

/**
 * Awd20240509PrepDetails Class Doc Comment
 *
 * @category Class
 * @description The preparation details for a product. This contains the prep category, prep owner, and label owner. Prep instructions are generated based on the specified category.
 * @package  MPSolutions\AmznSellingPartnerApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Awd20240509PrepDetails implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PrepDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'label_owner' => '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509LabelOwner',
        'prep_category' => '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509PrepCategory',
        'prep_instructions' => '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509PrepInstruction[]',
        'prep_owner' => '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509PrepOwner'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'label_owner' => null,
        'prep_category' => null,
        'prep_instructions' => null,
        'prep_owner' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'label_owner' => 'labelOwner',
        'prep_category' => 'prepCategory',
        'prep_instructions' => 'prepInstructions',
        'prep_owner' => 'prepOwner'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'label_owner' => 'setLabelOwner',
        'prep_category' => 'setPrepCategory',
        'prep_instructions' => 'setPrepInstructions',
        'prep_owner' => 'setPrepOwner'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'label_owner' => 'getLabelOwner',
        'prep_category' => 'getPrepCategory',
        'prep_instructions' => 'getPrepInstructions',
        'prep_owner' => 'getPrepOwner'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['label_owner'] = $data['label_owner'] ?? null;
        $this->container['prep_category'] = $data['prep_category'] ?? null;
        $this->container['prep_instructions'] = $data['prep_instructions'] ?? null;
        $this->container['prep_owner'] = $data['prep_owner'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets label_owner
     *
     * @return \MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509LabelOwner|null
     */
    public function getLabelOwner()
    {
        return $this->container['label_owner'];
    }

    /**
     * Sets label_owner
     *
     * @param \MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509LabelOwner|null $label_owner label_owner
     *
     * @return self
     */
    public function setLabelOwner($label_owner)
    {
        $this->container['label_owner'] = $label_owner;

        return $this;
    }

    /**
     * Gets prep_category
     *
     * @return \MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509PrepCategory|null
     */
    public function getPrepCategory()
    {
        return $this->container['prep_category'];
    }

    /**
     * Sets prep_category
     *
     * @param \MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509PrepCategory|null $prep_category prep_category
     *
     * @return self
     */
    public function setPrepCategory($prep_category)
    {
        $this->container['prep_category'] = $prep_category;

        return $this;
    }

    /**
     * Gets prep_instructions
     *
     * @return \MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509PrepInstruction[]|null
     */
    public function getPrepInstructions()
    {
        return $this->container['prep_instructions'];
    }

    /**
     * Sets prep_instructions
     *
     * @param \MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509PrepInstruction[]|null $prep_instructions Contains information about the preparation of the inbound products. The system auto-generates this field with the use of the `prepCategory`, and if you attempt to pass a value for this field, the system will ignore it.
     *
     * @return self
     */
    public function setPrepInstructions($prep_instructions)
    {
        $this->container['prep_instructions'] = $prep_instructions;

        return $this;
    }

    /**
     * Gets prep_owner
     *
     * @return \MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509PrepOwner|null
     */
    public function getPrepOwner()
    {
        return $this->container['prep_owner'];
    }

    /**
     * Sets prep_owner
     *
     * @param \MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509PrepOwner|null $prep_owner prep_owner
     *
     * @return self
     */
    public function setPrepOwner($prep_owner)
    {
        $this->container['prep_owner'] = $prep_owner;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


