<?php
/**
 * Awd20240509InventorySummary
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MPSolutions\AmznSellingPartnerApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * The Selling Partner API for Amazon Warehousing and Distribution
 *
 * The Selling Partner API for Amazon Warehousing and Distribution (AWD) provides programmatic access to information about AWD shipments and inventory.
 *
 * The version of the OpenAPI document: 2024-05-09
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MPSolutions\AmznSellingPartnerApi\Models\Awd20240509;

use \ArrayAccess;
use \MPSolutions\AmznSellingPartnerApi\Models\ModelInterface;
use \MPSolutions\AmznSellingPartnerApi\ObjectSerializer;

/**
 * Awd20240509InventorySummary Class Doc Comment
 *
 * @category Class
 * @description Summary of inventory per SKU.
 * @package  MPSolutions\AmznSellingPartnerApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Awd20240509InventorySummary implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'InventorySummary';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'expiration_details' => '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ExpirationDetails[]',
        'inventory_details' => '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509InventoryDetails',
        'sku' => 'string',
        'total_inbound_quantity' => 'int',
        'total_onhand_quantity' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'expiration_details' => null,
        'inventory_details' => null,
        'sku' => null,
        'total_inbound_quantity' => 'int64',
        'total_onhand_quantity' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'expiration_details' => 'expirationDetails',
        'inventory_details' => 'inventoryDetails',
        'sku' => 'sku',
        'total_inbound_quantity' => 'totalInboundQuantity',
        'total_onhand_quantity' => 'totalOnhandQuantity'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'expiration_details' => 'setExpirationDetails',
        'inventory_details' => 'setInventoryDetails',
        'sku' => 'setSku',
        'total_inbound_quantity' => 'setTotalInboundQuantity',
        'total_onhand_quantity' => 'setTotalOnhandQuantity'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'expiration_details' => 'getExpirationDetails',
        'inventory_details' => 'getInventoryDetails',
        'sku' => 'getSku',
        'total_inbound_quantity' => 'getTotalInboundQuantity',
        'total_onhand_quantity' => 'getTotalOnhandQuantity'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['expiration_details'] = $data['expiration_details'] ?? null;
        $this->container['inventory_details'] = $data['inventory_details'] ?? null;
        $this->container['sku'] = $data['sku'] ?? null;
        $this->container['total_inbound_quantity'] = $data['total_inbound_quantity'] ?? null;
        $this->container['total_onhand_quantity'] = $data['total_onhand_quantity'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['sku'] === null) {
            $invalidProperties[] = "'sku' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets expiration_details
     *
     * @return \MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ExpirationDetails[]|null
     */
    public function getExpirationDetails()
    {
        return $this->container['expiration_details'];
    }

    /**
     * Sets expiration_details
     *
     * @param \MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ExpirationDetails[]|null $expiration_details The expiration details of the inventory. This object will only appear if the `details` parameter in the request is set to `SHOW`.
     *
     * @return self
     */
    public function setExpirationDetails($expiration_details)
    {
        $this->container['expiration_details'] = $expiration_details;

        return $this;
    }

    /**
     * Gets inventory_details
     *
     * @return \MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509InventoryDetails|null
     */
    public function getInventoryDetails()
    {
        return $this->container['inventory_details'];
    }

    /**
     * Sets inventory_details
     *
     * @param \MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509InventoryDetails|null $inventory_details inventory_details
     *
     * @return self
     */
    public function setInventoryDetails($inventory_details)
    {
        $this->container['inventory_details'] = $inventory_details;

        return $this;
    }

    /**
     * Gets sku
     *
     * @return string
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     *
     * @param string $sku The seller or merchant SKU.
     *
     * @return self
     */
    public function setSku($sku)
    {
        $this->container['sku'] = $sku;

        return $this;
    }

    /**
     * Gets total_inbound_quantity
     *
     * @return int|null
     */
    public function getTotalInboundQuantity()
    {
        return $this->container['total_inbound_quantity'];
    }

    /**
     * Sets total_inbound_quantity
     *
     * @param int|null $total_inbound_quantity Total quantity that is in-transit from the seller and has not yet been received at an AWD Distribution Center
     *
     * @return self
     */
    public function setTotalInboundQuantity($total_inbound_quantity)
    {
        $this->container['total_inbound_quantity'] = $total_inbound_quantity;

        return $this;
    }

    /**
     * Gets total_onhand_quantity
     *
     * @return int|null
     */
    public function getTotalOnhandQuantity()
    {
        return $this->container['total_onhand_quantity'];
    }

    /**
     * Sets total_onhand_quantity
     *
     * @param int|null $total_onhand_quantity Total quantity that is present in AWD distribution centers.
     *
     * @return self
     */
    public function setTotalOnhandQuantity($total_onhand_quantity)
    {
        $this->container['total_onhand_quantity'] = $total_onhand_quantity;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


