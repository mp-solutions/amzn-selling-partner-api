<?php
/**
 * MerchantFulfillmentApi
 * PHP version 7.2
 *
 * @category Class
 * @package  MPSolutions\AmznSellingPartnerApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Selling Partner API for Merchant Fulfillment
 *
 * The Selling Partner API for Merchant Fulfillment helps you build applications that let sellers purchase shipping for non-Prime and Prime orders using Amazonâ€™s Buy Shipping Services.
 *
 * The version of the OpenAPI document: v0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MPSolutions\AmznSellingPartnerApi\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
//use GuzzleHttp\Psr7\Request;
use MPSolutions\AmznSellingPartnerApi\AmazonRequest as Request;
use GuzzleHttp\RequestOptions;
use MPSolutions\AmznSellingPartnerApi\ApiException;
use MPSolutions\AmznSellingPartnerApi\Configuration;
use MPSolutions\AmznSellingPartnerApi\HeaderSelector;
use MPSolutions\AmznSellingPartnerApi\ObjectSerializer;

/**
 * MerchantFulfillmentApi Class Doc Comment
 *
 * @category Class
 * @package  MPSolutions\AmznSellingPartnerApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class MerchantFulfillmentApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation cancelShipment
     *
     * @param  string $shipment_id The Amazon-defined shipment identifier for the shipment to cancel. (required)
     *
     * @throws \MPSolutions\AmznSellingPartnerApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CancelShipmentResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CancelShipmentResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CancelShipmentResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CancelShipmentResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CancelShipmentResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CancelShipmentResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CancelShipmentResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CancelShipmentResponse
     */
    public function cancelShipment($shipment_id)
    {
        list($response) = $this->cancelShipmentWithHttpInfo($shipment_id);
        return $response;
    }

    /**
     * Operation cancelShipmentWithHttpInfo
     *
     * @param  string $shipment_id The Amazon-defined shipment identifier for the shipment to cancel. (required)
     *
     * @throws \MPSolutions\AmznSellingPartnerApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CancelShipmentResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CancelShipmentResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CancelShipmentResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CancelShipmentResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CancelShipmentResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CancelShipmentResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CancelShipmentResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CancelShipmentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cancelShipmentWithHttpInfo($shipment_id)
    {
        $request = $this->cancelShipmentRequest($shipment_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CancelShipmentResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CancelShipmentResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CancelShipmentResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CancelShipmentResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CancelShipmentResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CancelShipmentResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CancelShipmentResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CancelShipmentResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CancelShipmentResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CancelShipmentResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CancelShipmentResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CancelShipmentResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CancelShipmentResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CancelShipmentResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CancelShipmentResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CancelShipmentResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CancelShipmentResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CancelShipmentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CancelShipmentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CancelShipmentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CancelShipmentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CancelShipmentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CancelShipmentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CancelShipmentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CancelShipmentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cancelShipmentAsync
     *
     * @param  string $shipment_id The Amazon-defined shipment identifier for the shipment to cancel. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelShipmentAsync($shipment_id)
    {
        return $this->cancelShipmentAsyncWithHttpInfo($shipment_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cancelShipmentAsyncWithHttpInfo
     *
     * @param  string $shipment_id The Amazon-defined shipment identifier for the shipment to cancel. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelShipmentAsyncWithHttpInfo($shipment_id)
    {
        $returnType = '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CancelShipmentResponse';
        $request = $this->cancelShipmentRequest($shipment_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cancelShipment'
     *
     * @param  string $shipment_id The Amazon-defined shipment identifier for the shipment to cancel. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function cancelShipmentRequest($shipment_id)
    {
        // verify the required parameter 'shipment_id' is set
        if ($shipment_id === null || (is_array($shipment_id) && count($shipment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipment_id when calling cancelShipment'
            );
        }
        if (!preg_match("/[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}/", $shipment_id)) {
            throw new \InvalidArgumentException("invalid value for \"shipment_id\" when calling MerchantFulfillmentApi.cancelShipment, must conform to the pattern /[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}/.");
        }


        $resourcePath = '/mfn/v0/shipments/{shipmentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($shipment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer::toPathValue($shipment_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $headers = array_merge(
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
		$method = 'DELETE';
        return new Request(
            $method,
            $resourcePath,
            $headers,
            $query,
            $httpBody,
            $this->config
        );
    }

    /**
     * Operation cancelShipmentOld
     *
     * @param  string $shipment_id The Amazon-defined shipment identifier for the shipment to cancel. (required)
     *
     * @throws \MPSolutions\AmznSellingPartnerApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CancelShipmentResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CancelShipmentResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CancelShipmentResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CancelShipmentResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CancelShipmentResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CancelShipmentResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CancelShipmentResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CancelShipmentResponse
     */
    public function cancelShipmentOld($shipment_id)
    {
        list($response) = $this->cancelShipmentOldWithHttpInfo($shipment_id);
        return $response;
    }

    /**
     * Operation cancelShipmentOldWithHttpInfo
     *
     * @param  string $shipment_id The Amazon-defined shipment identifier for the shipment to cancel. (required)
     *
     * @throws \MPSolutions\AmznSellingPartnerApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CancelShipmentResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CancelShipmentResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CancelShipmentResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CancelShipmentResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CancelShipmentResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CancelShipmentResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CancelShipmentResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CancelShipmentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cancelShipmentOldWithHttpInfo($shipment_id)
    {
        $request = $this->cancelShipmentOldRequest($shipment_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CancelShipmentResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CancelShipmentResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CancelShipmentResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CancelShipmentResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CancelShipmentResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CancelShipmentResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CancelShipmentResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CancelShipmentResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CancelShipmentResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CancelShipmentResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CancelShipmentResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CancelShipmentResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CancelShipmentResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CancelShipmentResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CancelShipmentResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CancelShipmentResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CancelShipmentResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CancelShipmentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CancelShipmentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CancelShipmentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CancelShipmentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CancelShipmentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CancelShipmentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CancelShipmentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CancelShipmentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cancelShipmentOldAsync
     *
     * @param  string $shipment_id The Amazon-defined shipment identifier for the shipment to cancel. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelShipmentOldAsync($shipment_id)
    {
        return $this->cancelShipmentOldAsyncWithHttpInfo($shipment_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cancelShipmentOldAsyncWithHttpInfo
     *
     * @param  string $shipment_id The Amazon-defined shipment identifier for the shipment to cancel. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelShipmentOldAsyncWithHttpInfo($shipment_id)
    {
        $returnType = '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CancelShipmentResponse';
        $request = $this->cancelShipmentOldRequest($shipment_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cancelShipmentOld'
     *
     * @param  string $shipment_id The Amazon-defined shipment identifier for the shipment to cancel. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function cancelShipmentOldRequest($shipment_id)
    {
        // verify the required parameter 'shipment_id' is set
        if ($shipment_id === null || (is_array($shipment_id) && count($shipment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipment_id when calling cancelShipmentOld'
            );
        }
        if (!preg_match("/[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}/", $shipment_id)) {
            throw new \InvalidArgumentException("invalid value for \"shipment_id\" when calling MerchantFulfillmentApi.cancelShipmentOld, must conform to the pattern /[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}/.");
        }


        $resourcePath = '/mfn/v0/shipments/{shipmentId}/cancel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($shipment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer::toPathValue($shipment_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $headers = array_merge(
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
		$method = 'PUT';
        return new Request(
            $method,
            $resourcePath,
            $headers,
            $query,
            $httpBody,
            $this->config
        );
    }

    /**
     * Operation createShipment
     *
     * @param  \MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CreateShipmentRequest $body body (required)
     *
     * @throws \MPSolutions\AmznSellingPartnerApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CreateShipmentResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CreateShipmentResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CreateShipmentResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CreateShipmentResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CreateShipmentResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CreateShipmentResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CreateShipmentResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CreateShipmentResponse
     */
    public function createShipment($body)
    {
        list($response) = $this->createShipmentWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createShipmentWithHttpInfo
     *
     * @param  \MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CreateShipmentRequest $body (required)
     *
     * @throws \MPSolutions\AmznSellingPartnerApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CreateShipmentResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CreateShipmentResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CreateShipmentResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CreateShipmentResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CreateShipmentResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CreateShipmentResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CreateShipmentResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CreateShipmentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createShipmentWithHttpInfo($body)
    {
        $request = $this->createShipmentRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CreateShipmentResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CreateShipmentResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CreateShipmentResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CreateShipmentResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CreateShipmentResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CreateShipmentResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CreateShipmentResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CreateShipmentResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CreateShipmentResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CreateShipmentResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CreateShipmentResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CreateShipmentResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CreateShipmentResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CreateShipmentResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CreateShipmentResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CreateShipmentResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CreateShipmentResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CreateShipmentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CreateShipmentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CreateShipmentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CreateShipmentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CreateShipmentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CreateShipmentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CreateShipmentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CreateShipmentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createShipmentAsync
     *
     * @param  \MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CreateShipmentRequest $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createShipmentAsync($body)
    {
        return $this->createShipmentAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createShipmentAsyncWithHttpInfo
     *
     * @param  \MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CreateShipmentRequest $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createShipmentAsyncWithHttpInfo($body)
    {
        $returnType = '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CreateShipmentResponse';
        $request = $this->createShipmentRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createShipment'
     *
     * @param  \MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\CreateShipmentRequest $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createShipmentRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createShipment'
            );
        }

        $resourcePath = '/mfn/v0/shipments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $headers = array_merge(
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
		$method = 'POST';
        return new Request(
            $method,
            $resourcePath,
            $headers,
            $query,
            $httpBody,
            $this->config
        );
    }

    /**
     * Operation getAdditionalSellerInputs
     *
     * @param  \MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsRequest $body body (required)
     *
     * @throws \MPSolutions\AmznSellingPartnerApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsResponse
     */
    public function getAdditionalSellerInputs($body)
    {
        list($response) = $this->getAdditionalSellerInputsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation getAdditionalSellerInputsWithHttpInfo
     *
     * @param  \MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsRequest $body (required)
     *
     * @throws \MPSolutions\AmznSellingPartnerApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAdditionalSellerInputsWithHttpInfo($body)
    {
        $request = $this->getAdditionalSellerInputsRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAdditionalSellerInputsAsync
     *
     * @param  \MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsRequest $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdditionalSellerInputsAsync($body)
    {
        return $this->getAdditionalSellerInputsAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAdditionalSellerInputsAsyncWithHttpInfo
     *
     * @param  \MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsRequest $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdditionalSellerInputsAsyncWithHttpInfo($body)
    {
        $returnType = '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsResponse';
        $request = $this->getAdditionalSellerInputsRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAdditionalSellerInputs'
     *
     * @param  \MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsRequest $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAdditionalSellerInputsRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling getAdditionalSellerInputs'
            );
        }

        $resourcePath = '/mfn/v0/additionalSellerInputs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $headers = array_merge(
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
		$method = 'POST';
        return new Request(
            $method,
            $resourcePath,
            $headers,
            $query,
            $httpBody,
            $this->config
        );
    }

    /**
     * Operation getAdditionalSellerInputsOld
     *
     * @param  \MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsRequest $body body (required)
     *
     * @throws \MPSolutions\AmznSellingPartnerApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsResponse
     */
    public function getAdditionalSellerInputsOld($body)
    {
        list($response) = $this->getAdditionalSellerInputsOldWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation getAdditionalSellerInputsOldWithHttpInfo
     *
     * @param  \MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsRequest $body (required)
     *
     * @throws \MPSolutions\AmznSellingPartnerApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAdditionalSellerInputsOldWithHttpInfo($body)
    {
        $request = $this->getAdditionalSellerInputsOldRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAdditionalSellerInputsOldAsync
     *
     * @param  \MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsRequest $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdditionalSellerInputsOldAsync($body)
    {
        return $this->getAdditionalSellerInputsOldAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAdditionalSellerInputsOldAsyncWithHttpInfo
     *
     * @param  \MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsRequest $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdditionalSellerInputsOldAsyncWithHttpInfo($body)
    {
        $returnType = '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsResponse';
        $request = $this->getAdditionalSellerInputsOldRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAdditionalSellerInputsOld'
     *
     * @param  \MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetAdditionalSellerInputsRequest $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAdditionalSellerInputsOldRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling getAdditionalSellerInputsOld'
            );
        }

        $resourcePath = '/mfn/v0/sellerInputs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $headers = array_merge(
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
		$method = 'POST';
        return new Request(
            $method,
            $resourcePath,
            $headers,
            $query,
            $httpBody,
            $this->config
        );
    }

    /**
     * Operation getEligibleShipmentServices
     *
     * @param  \MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesRequest $body body (required)
     *
     * @throws \MPSolutions\AmznSellingPartnerApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesResponse
     */
    public function getEligibleShipmentServices($body)
    {
        list($response) = $this->getEligibleShipmentServicesWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation getEligibleShipmentServicesWithHttpInfo
     *
     * @param  \MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesRequest $body (required)
     *
     * @throws \MPSolutions\AmznSellingPartnerApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEligibleShipmentServicesWithHttpInfo($body)
    {
        $request = $this->getEligibleShipmentServicesRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEligibleShipmentServicesAsync
     *
     * @param  \MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesRequest $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEligibleShipmentServicesAsync($body)
    {
        return $this->getEligibleShipmentServicesAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEligibleShipmentServicesAsyncWithHttpInfo
     *
     * @param  \MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesRequest $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEligibleShipmentServicesAsyncWithHttpInfo($body)
    {
        $returnType = '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesResponse';
        $request = $this->getEligibleShipmentServicesRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEligibleShipmentServices'
     *
     * @param  \MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesRequest $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEligibleShipmentServicesRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling getEligibleShipmentServices'
            );
        }

        $resourcePath = '/mfn/v0/eligibleShippingServices';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $headers = array_merge(
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
		$method = 'POST';
        return new Request(
            $method,
            $resourcePath,
            $headers,
            $query,
            $httpBody,
            $this->config
        );
    }

    /**
     * Operation getEligibleShipmentServicesOld
     *
     * @param  \MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesRequest $body body (required)
     *
     * @throws \MPSolutions\AmznSellingPartnerApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesResponse
     */
    public function getEligibleShipmentServicesOld($body)
    {
        list($response) = $this->getEligibleShipmentServicesOldWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation getEligibleShipmentServicesOldWithHttpInfo
     *
     * @param  \MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesRequest $body (required)
     *
     * @throws \MPSolutions\AmznSellingPartnerApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEligibleShipmentServicesOldWithHttpInfo($body)
    {
        $request = $this->getEligibleShipmentServicesOldRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEligibleShipmentServicesOldAsync
     *
     * @param  \MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesRequest $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEligibleShipmentServicesOldAsync($body)
    {
        return $this->getEligibleShipmentServicesOldAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEligibleShipmentServicesOldAsyncWithHttpInfo
     *
     * @param  \MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesRequest $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEligibleShipmentServicesOldAsyncWithHttpInfo($body)
    {
        $returnType = '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesResponse';
        $request = $this->getEligibleShipmentServicesOldRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEligibleShipmentServicesOld'
     *
     * @param  \MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetEligibleShipmentServicesRequest $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEligibleShipmentServicesOldRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling getEligibleShipmentServicesOld'
            );
        }

        $resourcePath = '/mfn/v0/eligibleServices';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $headers = array_merge(
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
		$method = 'POST';
        return new Request(
            $method,
            $resourcePath,
            $headers,
            $query,
            $httpBody,
            $this->config
        );
    }

    /**
     * Operation getShipment
     *
     * @param  string $shipment_id The Amazon-defined shipment identifier for the shipment. (required)
     *
     * @throws \MPSolutions\AmznSellingPartnerApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetShipmentResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetShipmentResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetShipmentResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetShipmentResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetShipmentResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetShipmentResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetShipmentResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetShipmentResponse
     */
    public function getShipment($shipment_id)
    {
        list($response) = $this->getShipmentWithHttpInfo($shipment_id);
        return $response;
    }

    /**
     * Operation getShipmentWithHttpInfo
     *
     * @param  string $shipment_id The Amazon-defined shipment identifier for the shipment. (required)
     *
     * @throws \MPSolutions\AmznSellingPartnerApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetShipmentResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetShipmentResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetShipmentResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetShipmentResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetShipmentResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetShipmentResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetShipmentResponse|\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetShipmentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getShipmentWithHttpInfo($shipment_id)
    {
        $request = $this->getShipmentRequest($shipment_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetShipmentResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetShipmentResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetShipmentResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetShipmentResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetShipmentResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetShipmentResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetShipmentResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetShipmentResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetShipmentResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetShipmentResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetShipmentResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetShipmentResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetShipmentResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetShipmentResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetShipmentResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetShipmentResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetShipmentResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetShipmentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetShipmentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetShipmentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetShipmentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetShipmentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetShipmentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetShipmentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetShipmentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getShipmentAsync
     *
     * @param  string $shipment_id The Amazon-defined shipment identifier for the shipment. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getShipmentAsync($shipment_id)
    {
        return $this->getShipmentAsyncWithHttpInfo($shipment_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getShipmentAsyncWithHttpInfo
     *
     * @param  string $shipment_id The Amazon-defined shipment identifier for the shipment. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getShipmentAsyncWithHttpInfo($shipment_id)
    {
        $returnType = '\MPSolutions\AmznSellingPartnerApi\Models\MerchantFulfillment\GetShipmentResponse';
        $request = $this->getShipmentRequest($shipment_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getShipment'
     *
     * @param  string $shipment_id The Amazon-defined shipment identifier for the shipment. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getShipmentRequest($shipment_id)
    {
        // verify the required parameter 'shipment_id' is set
        if ($shipment_id === null || (is_array($shipment_id) && count($shipment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipment_id when calling getShipment'
            );
        }
        if (!preg_match("/[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}/", $shipment_id)) {
            throw new \InvalidArgumentException("invalid value for \"shipment_id\" when calling MerchantFulfillmentApi.getShipment, must conform to the pattern /[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}/.");
        }


        $resourcePath = '/mfn/v0/shipments/{shipmentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($shipment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer::toPathValue($shipment_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $headers = array_merge(
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
		$method = 'GET';
        return new Request(
            $method,
            $resourcePath,
            $headers,
            $query,
            $httpBody,
            $this->config
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
