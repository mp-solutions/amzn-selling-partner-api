<?php
/**
 * Awd20240509AwdApi
 * PHP version 7.2
 *
 * @category Class
 * @package  MPSolutions\AmznSellingPartnerApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * The Selling Partner API for Amazon Warehousing and Distribution
 *
 * The Selling Partner API for Amazon Warehousing and Distribution (AWD) provides programmatic access to information about AWD shipments and inventory.
 *
 * The version of the OpenAPI document: 2024-05-09
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MPSolutions\AmznSellingPartnerApi\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
//use GuzzleHttp\Psr7\Request;
use MPSolutions\AmznSellingPartnerApi\AmazonRequest as Request;
use GuzzleHttp\RequestOptions;
use MPSolutions\AmznSellingPartnerApi\ApiException;
use MPSolutions\AmznSellingPartnerApi\Configuration;
use MPSolutions\AmznSellingPartnerApi\HeaderSelector;
use MPSolutions\AmznSellingPartnerApi\ObjectSerializer;

/**
 * Awd20240509AwdApi Class Doc Comment
 *
 * @category Class
 * @package  MPSolutions\AmznSellingPartnerApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Awd20240509AwdApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation cancelInbound
     *
     * @param  string $order_id The ID of the inbound order you want to cancel. (required)
     *
     * @throws \MPSolutions\AmznSellingPartnerApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function cancelInbound($order_id)
    {
        $this->cancelInboundWithHttpInfo($order_id);
    }

    /**
     * Operation cancelInboundWithHttpInfo
     *
     * @param  string $order_id The ID of the inbound order you want to cancel. (required)
     *
     * @throws \MPSolutions\AmznSellingPartnerApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function cancelInboundWithHttpInfo($order_id)
    {
        $request = $this->cancelInboundRequest($order_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cancelInboundAsync
     *
     * @param  string $order_id The ID of the inbound order you want to cancel. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelInboundAsync($order_id)
    {
        return $this->cancelInboundAsyncWithHttpInfo($order_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cancelInboundAsyncWithHttpInfo
     *
     * @param  string $order_id The ID of the inbound order you want to cancel. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelInboundAsyncWithHttpInfo($order_id)
    {
        $returnType = '';
        $request = $this->cancelInboundRequest($order_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cancelInbound'
     *
     * @param  string $order_id The ID of the inbound order you want to cancel. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function cancelInboundRequest($order_id)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling cancelInbound'
            );
        }

        $resourcePath = '/awd/2024-05-09/inboundOrders/{orderId}/cancellation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $headers = array_merge(
            $headerParams,
            $headers
        );

        ksort($queryParams);
        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        $method = 'POST';
        return new Request(
            $method,
            $resourcePath,
            $headers,
            $query,
            $httpBody,
            $this->config
        );
    }

    /**
     * Operation checkInboundEligibility
     *
     * @param  \MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509InboundPackages $body Represents the packages you want to inbound. (required)
     *
     * @throws \MPSolutions\AmznSellingPartnerApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509InboundEligibility|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList
     */
    public function checkInboundEligibility($body)
    {
        list($response) = $this->checkInboundEligibilityWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation checkInboundEligibilityWithHttpInfo
     *
     * @param  \MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509InboundPackages $body Represents the packages you want to inbound. (required)
     *
     * @throws \MPSolutions\AmznSellingPartnerApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509InboundEligibility|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList, HTTP status code, HTTP response headers (array of strings)
     */
    public function checkInboundEligibilityWithHttpInfo($body)
    {
        $request = $this->checkInboundEligibilityRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509InboundEligibility' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509InboundEligibility', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 413:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509InboundEligibility';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509InboundEligibility',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation checkInboundEligibilityAsync
     *
     * @param  \MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509InboundPackages $body Represents the packages you want to inbound. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function checkInboundEligibilityAsync($body)
    {
        return $this->checkInboundEligibilityAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation checkInboundEligibilityAsyncWithHttpInfo
     *
     * @param  \MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509InboundPackages $body Represents the packages you want to inbound. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function checkInboundEligibilityAsyncWithHttpInfo($body)
    {
        $returnType = '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509InboundEligibility';
        $request = $this->checkInboundEligibilityRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'checkInboundEligibility'
     *
     * @param  \MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509InboundPackages $body Represents the packages you want to inbound. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function checkInboundEligibilityRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling checkInboundEligibility'
            );
        }

        $resourcePath = '/awd/2024-05-09/inboundEligibility';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $headers = array_merge(
            $headerParams,
            $headers
        );

        ksort($queryParams);
        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        $method = 'POST';
        return new Request(
            $method,
            $resourcePath,
            $headers,
            $query,
            $httpBody,
            $this->config
        );
    }

    /**
     * Operation confirmInbound
     *
     * @param  string $order_id The ID of the inbound order that you want to confirm. (required)
     *
     * @throws \MPSolutions\AmznSellingPartnerApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function confirmInbound($order_id)
    {
        $this->confirmInboundWithHttpInfo($order_id);
    }

    /**
     * Operation confirmInboundWithHttpInfo
     *
     * @param  string $order_id The ID of the inbound order that you want to confirm. (required)
     *
     * @throws \MPSolutions\AmznSellingPartnerApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function confirmInboundWithHttpInfo($order_id)
    {
        $request = $this->confirmInboundRequest($order_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation confirmInboundAsync
     *
     * @param  string $order_id The ID of the inbound order that you want to confirm. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function confirmInboundAsync($order_id)
    {
        return $this->confirmInboundAsyncWithHttpInfo($order_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation confirmInboundAsyncWithHttpInfo
     *
     * @param  string $order_id The ID of the inbound order that you want to confirm. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function confirmInboundAsyncWithHttpInfo($order_id)
    {
        $returnType = '';
        $request = $this->confirmInboundRequest($order_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'confirmInbound'
     *
     * @param  string $order_id The ID of the inbound order that you want to confirm. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function confirmInboundRequest($order_id)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling confirmInbound'
            );
        }

        $resourcePath = '/awd/2024-05-09/inboundOrders/{orderId}/confirmation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $headers = array_merge(
            $headerParams,
            $headers
        );

        ksort($queryParams);
        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        $method = 'POST';
        return new Request(
            $method,
            $resourcePath,
            $headers,
            $query,
            $httpBody,
            $this->config
        );
    }

    /**
     * Operation createInbound
     *
     * @param  \MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509InboundOrderCreationData $body Payload for creating an inbound order. (required)
     *
     * @throws \MPSolutions\AmznSellingPartnerApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509InboundOrderReference|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList
     */
    public function createInbound($body)
    {
        list($response) = $this->createInboundWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createInboundWithHttpInfo
     *
     * @param  \MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509InboundOrderCreationData $body Payload for creating an inbound order. (required)
     *
     * @throws \MPSolutions\AmznSellingPartnerApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509InboundOrderReference|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList, HTTP status code, HTTP response headers (array of strings)
     */
    public function createInboundWithHttpInfo($body)
    {
        $request = $this->createInboundRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509InboundOrderReference' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509InboundOrderReference', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 413:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509InboundOrderReference';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509InboundOrderReference',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createInboundAsync
     *
     * @param  \MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509InboundOrderCreationData $body Payload for creating an inbound order. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createInboundAsync($body)
    {
        return $this->createInboundAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createInboundAsyncWithHttpInfo
     *
     * @param  \MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509InboundOrderCreationData $body Payload for creating an inbound order. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createInboundAsyncWithHttpInfo($body)
    {
        $returnType = '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509InboundOrderReference';
        $request = $this->createInboundRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createInbound'
     *
     * @param  \MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509InboundOrderCreationData $body Payload for creating an inbound order. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createInboundRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createInbound'
            );
        }

        $resourcePath = '/awd/2024-05-09/inboundOrders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $headers = array_merge(
            $headerParams,
            $headers
        );

        ksort($queryParams);
        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        $method = 'POST';
        return new Request(
            $method,
            $resourcePath,
            $headers,
            $query,
            $httpBody,
            $this->config
        );
    }

    /**
     * Operation getInbound
     *
     * @param  string $order_id The ID of the inbound order that you want to retrieve. (required)
     *
     * @throws \MPSolutions\AmznSellingPartnerApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509InboundOrder|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList
     */
    public function getInbound($order_id)
    {
        list($response) = $this->getInboundWithHttpInfo($order_id);
        return $response;
    }

    /**
     * Operation getInboundWithHttpInfo
     *
     * @param  string $order_id The ID of the inbound order that you want to retrieve. (required)
     *
     * @throws \MPSolutions\AmznSellingPartnerApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509InboundOrder|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList, HTTP status code, HTTP response headers (array of strings)
     */
    public function getInboundWithHttpInfo($order_id)
    {
        $request = $this->getInboundRequest($order_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509InboundOrder' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509InboundOrder', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 413:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509InboundOrder';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509InboundOrder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getInboundAsync
     *
     * @param  string $order_id The ID of the inbound order that you want to retrieve. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInboundAsync($order_id)
    {
        return $this->getInboundAsyncWithHttpInfo($order_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getInboundAsyncWithHttpInfo
     *
     * @param  string $order_id The ID of the inbound order that you want to retrieve. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInboundAsyncWithHttpInfo($order_id)
    {
        $returnType = '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509InboundOrder';
        $request = $this->getInboundRequest($order_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getInbound'
     *
     * @param  string $order_id The ID of the inbound order that you want to retrieve. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getInboundRequest($order_id)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling getInbound'
            );
        }

        $resourcePath = '/awd/2024-05-09/inboundOrders/{orderId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $headers = array_merge(
            $headerParams,
            $headers
        );

        ksort($queryParams);
        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        $method = 'GET';
        return new Request(
            $method,
            $resourcePath,
            $headers,
            $query,
            $httpBody,
            $this->config
        );
    }

    /**
     * Operation getInboundShipment
     *
     * @param  string $shipment_id ID for the shipment. A shipment contains the cases being inbounded. (required)
     * @param  string $sku_quantities If equal to &#x60;SHOW&#x60;, the response includes the shipment SKU quantity details.  Defaults to &#x60;HIDE&#x60;, in which case the response does not contain SKU quantities (optional)
     *
     * @throws \MPSolutions\AmznSellingPartnerApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509InboundShipment|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList
     */
    public function getInboundShipment($shipment_id, $sku_quantities = null)
    {
        list($response) = $this->getInboundShipmentWithHttpInfo($shipment_id, $sku_quantities);
        return $response;
    }

    /**
     * Operation getInboundShipmentWithHttpInfo
     *
     * @param  string $shipment_id ID for the shipment. A shipment contains the cases being inbounded. (required)
     * @param  string $sku_quantities If equal to &#x60;SHOW&#x60;, the response includes the shipment SKU quantity details.  Defaults to &#x60;HIDE&#x60;, in which case the response does not contain SKU quantities (optional)
     *
     * @throws \MPSolutions\AmznSellingPartnerApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509InboundShipment|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList, HTTP status code, HTTP response headers (array of strings)
     */
    public function getInboundShipmentWithHttpInfo($shipment_id, $sku_quantities = null)
    {
        $request = $this->getInboundShipmentRequest($shipment_id, $sku_quantities);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509InboundShipment' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509InboundShipment', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 413:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509InboundShipment';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509InboundShipment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getInboundShipmentAsync
     *
     * @param  string $shipment_id ID for the shipment. A shipment contains the cases being inbounded. (required)
     * @param  string $sku_quantities If equal to &#x60;SHOW&#x60;, the response includes the shipment SKU quantity details.  Defaults to &#x60;HIDE&#x60;, in which case the response does not contain SKU quantities (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInboundShipmentAsync($shipment_id, $sku_quantities = null)
    {
        return $this->getInboundShipmentAsyncWithHttpInfo($shipment_id, $sku_quantities)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getInboundShipmentAsyncWithHttpInfo
     *
     * @param  string $shipment_id ID for the shipment. A shipment contains the cases being inbounded. (required)
     * @param  string $sku_quantities If equal to &#x60;SHOW&#x60;, the response includes the shipment SKU quantity details.  Defaults to &#x60;HIDE&#x60;, in which case the response does not contain SKU quantities (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInboundShipmentAsyncWithHttpInfo($shipment_id, $sku_quantities = null)
    {
        $returnType = '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509InboundShipment';
        $request = $this->getInboundShipmentRequest($shipment_id, $sku_quantities);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getInboundShipment'
     *
     * @param  string $shipment_id ID for the shipment. A shipment contains the cases being inbounded. (required)
     * @param  string $sku_quantities If equal to &#x60;SHOW&#x60;, the response includes the shipment SKU quantity details.  Defaults to &#x60;HIDE&#x60;, in which case the response does not contain SKU quantities (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getInboundShipmentRequest($shipment_id, $sku_quantities = null)
    {
        // verify the required parameter 'shipment_id' is set
        if ($shipment_id === null || (is_array($shipment_id) && count($shipment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipment_id when calling getInboundShipment'
            );
        }
        if (strlen($shipment_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$shipment_id" when calling Awd20240509AwdApi.getInboundShipment, must be bigger than or equal to 1.');
        }


        $resourcePath = '/awd/2024-05-09/inboundShipments/{shipmentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($sku_quantities)) {
            $sku_quantities = ObjectSerializer::serializeCollection($sku_quantities, '', true);
        }
        if ($sku_quantities !== null) {
            $queryParams['skuQuantities'] = $sku_quantities;
        }


        // path params
        if ($shipment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer::toPathValue($shipment_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $headers = array_merge(
            $headerParams,
            $headers
        );

        ksort($queryParams);
        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        $method = 'GET';
        return new Request(
            $method,
            $resourcePath,
            $headers,
            $query,
            $httpBody,
            $this->config
        );
    }

    /**
     * Operation getInboundShipmentLabels
     *
     * @param  string $shipment_id ID for the shipment. (required)
     * @param  string $page_type Page type for the generated labels. The default is &#x60;PLAIN_PAPER&#x60;. (optional)
     * @param  string $format_type The format type of the output file that contains your labels. The default format type is &#x60;PDF&#x60;. (optional)
     *
     * @throws \MPSolutions\AmznSellingPartnerApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ShipmentLabels|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList
     */
    public function getInboundShipmentLabels($shipment_id, $page_type = null, $format_type = null)
    {
        list($response) = $this->getInboundShipmentLabelsWithHttpInfo($shipment_id, $page_type, $format_type);
        return $response;
    }

    /**
     * Operation getInboundShipmentLabelsWithHttpInfo
     *
     * @param  string $shipment_id ID for the shipment. (required)
     * @param  string $page_type Page type for the generated labels. The default is &#x60;PLAIN_PAPER&#x60;. (optional)
     * @param  string $format_type The format type of the output file that contains your labels. The default format type is &#x60;PDF&#x60;. (optional)
     *
     * @throws \MPSolutions\AmznSellingPartnerApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ShipmentLabels|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList, HTTP status code, HTTP response headers (array of strings)
     */
    public function getInboundShipmentLabelsWithHttpInfo($shipment_id, $page_type = null, $format_type = null)
    {
        $request = $this->getInboundShipmentLabelsRequest($shipment_id, $page_type, $format_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ShipmentLabels' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ShipmentLabels', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 413:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ShipmentLabels';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ShipmentLabels',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getInboundShipmentLabelsAsync
     *
     * @param  string $shipment_id ID for the shipment. (required)
     * @param  string $page_type Page type for the generated labels. The default is &#x60;PLAIN_PAPER&#x60;. (optional)
     * @param  string $format_type The format type of the output file that contains your labels. The default format type is &#x60;PDF&#x60;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInboundShipmentLabelsAsync($shipment_id, $page_type = null, $format_type = null)
    {
        return $this->getInboundShipmentLabelsAsyncWithHttpInfo($shipment_id, $page_type, $format_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getInboundShipmentLabelsAsyncWithHttpInfo
     *
     * @param  string $shipment_id ID for the shipment. (required)
     * @param  string $page_type Page type for the generated labels. The default is &#x60;PLAIN_PAPER&#x60;. (optional)
     * @param  string $format_type The format type of the output file that contains your labels. The default format type is &#x60;PDF&#x60;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInboundShipmentLabelsAsyncWithHttpInfo($shipment_id, $page_type = null, $format_type = null)
    {
        $returnType = '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ShipmentLabels';
        $request = $this->getInboundShipmentLabelsRequest($shipment_id, $page_type, $format_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getInboundShipmentLabels'
     *
     * @param  string $shipment_id ID for the shipment. (required)
     * @param  string $page_type Page type for the generated labels. The default is &#x60;PLAIN_PAPER&#x60;. (optional)
     * @param  string $format_type The format type of the output file that contains your labels. The default format type is &#x60;PDF&#x60;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getInboundShipmentLabelsRequest($shipment_id, $page_type = null, $format_type = null)
    {
        // verify the required parameter 'shipment_id' is set
        if ($shipment_id === null || (is_array($shipment_id) && count($shipment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipment_id when calling getInboundShipmentLabels'
            );
        }
        if (strlen($shipment_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$shipment_id" when calling Awd20240509AwdApi.getInboundShipmentLabels, must be bigger than or equal to 1.');
        }


        $resourcePath = '/awd/2024-05-09/inboundShipments/{shipmentId}/labels';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($page_type)) {
            $page_type = ObjectSerializer::serializeCollection($page_type, '', true);
        }
        if ($page_type !== null) {
            $queryParams['pageType'] = $page_type;
        }
        // query params
        if (is_array($format_type)) {
            $format_type = ObjectSerializer::serializeCollection($format_type, '', true);
        }
        if ($format_type !== null) {
            $queryParams['formatType'] = $format_type;
        }


        // path params
        if ($shipment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer::toPathValue($shipment_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $headers = array_merge(
            $headerParams,
            $headers
        );

        ksort($queryParams);
        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        $method = 'GET';
        return new Request(
            $method,
            $resourcePath,
            $headers,
            $query,
            $httpBody,
            $this->config
        );
    }

    /**
     * Operation listInboundShipments
     *
     * @param  string $sort_by Field to sort results by. By default, the response will be sorted by UPDATED_AT. (optional)
     * @param  string $sort_order Sort the response in ASCENDING or DESCENDING order. By default, the response will be sorted in DESCENDING order. (optional)
     * @param  string $shipment_status Filter by inbound shipment status. (optional)
     * @param  \DateTime $updated_after List the inbound shipments that were updated after a certain time (inclusive). The date must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param  \DateTime $updated_before List the inbound shipments that were updated before a certain time (inclusive). The date must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param  int $max_results Maximum number of results to return. (optional, default to 25)
     * @param  string $next_token A token that is used to retrieve the next page of results. The response includes &#x60;nextToken&#x60; when the number of results exceeds the specified &#x60;maxResults&#x60; value. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextToken&#x60; is null. Note that this operation can return empty pages. (optional)
     *
     * @throws \MPSolutions\AmznSellingPartnerApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ShipmentListing|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList
     */
    public function listInboundShipments($sort_by = null, $sort_order = null, $shipment_status = null, $updated_after = null, $updated_before = null, $max_results = 25, $next_token = null)
    {
        list($response) = $this->listInboundShipmentsWithHttpInfo($sort_by, $sort_order, $shipment_status, $updated_after, $updated_before, $max_results, $next_token);
        return $response;
    }

    /**
     * Operation listInboundShipmentsWithHttpInfo
     *
     * @param  string $sort_by Field to sort results by. By default, the response will be sorted by UPDATED_AT. (optional)
     * @param  string $sort_order Sort the response in ASCENDING or DESCENDING order. By default, the response will be sorted in DESCENDING order. (optional)
     * @param  string $shipment_status Filter by inbound shipment status. (optional)
     * @param  \DateTime $updated_after List the inbound shipments that were updated after a certain time (inclusive). The date must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param  \DateTime $updated_before List the inbound shipments that were updated before a certain time (inclusive). The date must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param  int $max_results Maximum number of results to return. (optional, default to 25)
     * @param  string $next_token A token that is used to retrieve the next page of results. The response includes &#x60;nextToken&#x60; when the number of results exceeds the specified &#x60;maxResults&#x60; value. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextToken&#x60; is null. Note that this operation can return empty pages. (optional)
     *
     * @throws \MPSolutions\AmznSellingPartnerApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ShipmentListing|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList, HTTP status code, HTTP response headers (array of strings)
     */
    public function listInboundShipmentsWithHttpInfo($sort_by = null, $sort_order = null, $shipment_status = null, $updated_after = null, $updated_before = null, $max_results = 25, $next_token = null)
    {
        $request = $this->listInboundShipmentsRequest($sort_by, $sort_order, $shipment_status, $updated_after, $updated_before, $max_results, $next_token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ShipmentListing' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ShipmentListing', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 413:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ShipmentListing';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ShipmentListing',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listInboundShipmentsAsync
     *
     * @param  string $sort_by Field to sort results by. By default, the response will be sorted by UPDATED_AT. (optional)
     * @param  string $sort_order Sort the response in ASCENDING or DESCENDING order. By default, the response will be sorted in DESCENDING order. (optional)
     * @param  string $shipment_status Filter by inbound shipment status. (optional)
     * @param  \DateTime $updated_after List the inbound shipments that were updated after a certain time (inclusive). The date must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param  \DateTime $updated_before List the inbound shipments that were updated before a certain time (inclusive). The date must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param  int $max_results Maximum number of results to return. (optional, default to 25)
     * @param  string $next_token A token that is used to retrieve the next page of results. The response includes &#x60;nextToken&#x60; when the number of results exceeds the specified &#x60;maxResults&#x60; value. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextToken&#x60; is null. Note that this operation can return empty pages. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listInboundShipmentsAsync($sort_by = null, $sort_order = null, $shipment_status = null, $updated_after = null, $updated_before = null, $max_results = 25, $next_token = null)
    {
        return $this->listInboundShipmentsAsyncWithHttpInfo($sort_by, $sort_order, $shipment_status, $updated_after, $updated_before, $max_results, $next_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listInboundShipmentsAsyncWithHttpInfo
     *
     * @param  string $sort_by Field to sort results by. By default, the response will be sorted by UPDATED_AT. (optional)
     * @param  string $sort_order Sort the response in ASCENDING or DESCENDING order. By default, the response will be sorted in DESCENDING order. (optional)
     * @param  string $shipment_status Filter by inbound shipment status. (optional)
     * @param  \DateTime $updated_after List the inbound shipments that were updated after a certain time (inclusive). The date must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param  \DateTime $updated_before List the inbound shipments that were updated before a certain time (inclusive). The date must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param  int $max_results Maximum number of results to return. (optional, default to 25)
     * @param  string $next_token A token that is used to retrieve the next page of results. The response includes &#x60;nextToken&#x60; when the number of results exceeds the specified &#x60;maxResults&#x60; value. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextToken&#x60; is null. Note that this operation can return empty pages. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listInboundShipmentsAsyncWithHttpInfo($sort_by = null, $sort_order = null, $shipment_status = null, $updated_after = null, $updated_before = null, $max_results = 25, $next_token = null)
    {
        $returnType = '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ShipmentListing';
        $request = $this->listInboundShipmentsRequest($sort_by, $sort_order, $shipment_status, $updated_after, $updated_before, $max_results, $next_token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listInboundShipments'
     *
     * @param  string $sort_by Field to sort results by. By default, the response will be sorted by UPDATED_AT. (optional)
     * @param  string $sort_order Sort the response in ASCENDING or DESCENDING order. By default, the response will be sorted in DESCENDING order. (optional)
     * @param  string $shipment_status Filter by inbound shipment status. (optional)
     * @param  \DateTime $updated_after List the inbound shipments that were updated after a certain time (inclusive). The date must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param  \DateTime $updated_before List the inbound shipments that were updated before a certain time (inclusive). The date must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param  int $max_results Maximum number of results to return. (optional, default to 25)
     * @param  string $next_token A token that is used to retrieve the next page of results. The response includes &#x60;nextToken&#x60; when the number of results exceeds the specified &#x60;maxResults&#x60; value. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextToken&#x60; is null. Note that this operation can return empty pages. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listInboundShipmentsRequest($sort_by = null, $sort_order = null, $shipment_status = null, $updated_after = null, $updated_before = null, $max_results = 25, $next_token = null)
    {
        if ($max_results !== null && $max_results > 200) {
            throw new \InvalidArgumentException('invalid value for "$max_results" when calling Awd20240509AwdApi.listInboundShipments, must be smaller than or equal to 200.');
        }
        if ($max_results !== null && $max_results < 1) {
            throw new \InvalidArgumentException('invalid value for "$max_results" when calling Awd20240509AwdApi.listInboundShipments, must be bigger than or equal to 1.');
        }


        $resourcePath = '/awd/2024-05-09/inboundShipments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($sort_by)) {
            $sort_by = ObjectSerializer::serializeCollection($sort_by, '', true);
        }
        if ($sort_by !== null) {
            $queryParams['sortBy'] = $sort_by;
        }
        // query params
        if (is_array($sort_order)) {
            $sort_order = ObjectSerializer::serializeCollection($sort_order, '', true);
        }
        if ($sort_order !== null) {
            $queryParams['sortOrder'] = $sort_order;
        }
        // query params
        if (is_array($shipment_status)) {
            $shipment_status = ObjectSerializer::serializeCollection($shipment_status, '', true);
        }
        if ($shipment_status !== null) {
            $queryParams['shipmentStatus'] = $shipment_status;
        }
        // query params
        if (is_array($updated_after)) {
            $updated_after = ObjectSerializer::serializeCollection($updated_after, '', true);
        }
        if ($updated_after !== null) {
            $queryParams['updatedAfter'] = $updated_after;
        }
        // query params
        if (is_array($updated_before)) {
            $updated_before = ObjectSerializer::serializeCollection($updated_before, '', true);
        }
        if ($updated_before !== null) {
            $queryParams['updatedBefore'] = $updated_before;
        }
        // query params
        if (is_array($max_results)) {
            $max_results = ObjectSerializer::serializeCollection($max_results, '', true);
        }
        if ($max_results !== null) {
            $queryParams['maxResults'] = $max_results;
        }
        // query params
        if (is_array($next_token)) {
            $next_token = ObjectSerializer::serializeCollection($next_token, '', true);
        }
        if ($next_token !== null) {
            $queryParams['nextToken'] = $next_token;
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $headers = array_merge(
            $headerParams,
            $headers
        );

        ksort($queryParams);
        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        $method = 'GET';
        return new Request(
            $method,
            $resourcePath,
            $headers,
            $query,
            $httpBody,
            $this->config
        );
    }

    /**
     * Operation listInventory
     *
     * @param  string $sku Filter by seller or merchant SKU for the item. (optional)
     * @param  string $sort_order Sort the response in &#x60;ASCENDING&#x60; or &#x60;DESCENDING&#x60; order. (optional)
     * @param  string $details Set to &#x60;SHOW&#x60; to return summaries with additional inventory details. Defaults to &#x60;HIDE,&#x60; which returns only inventory summary totals. (optional)
     * @param  string $next_token A token that is used to retrieve the next page of results. The response includes &#x60;nextToken&#x60; when the number of results exceeds the specified &#x60;maxResults&#x60; value. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextToken&#x60; is null. Note that this operation can return empty pages. (optional)
     * @param  int $max_results Maximum number of results to return. (optional, default to 25)
     *
     * @throws \MPSolutions\AmznSellingPartnerApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509InventoryListing|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList
     */
    public function listInventory($sku = null, $sort_order = null, $details = null, $next_token = null, $max_results = 25)
    {
        list($response) = $this->listInventoryWithHttpInfo($sku, $sort_order, $details, $next_token, $max_results);
        return $response;
    }

    /**
     * Operation listInventoryWithHttpInfo
     *
     * @param  string $sku Filter by seller or merchant SKU for the item. (optional)
     * @param  string $sort_order Sort the response in &#x60;ASCENDING&#x60; or &#x60;DESCENDING&#x60; order. (optional)
     * @param  string $details Set to &#x60;SHOW&#x60; to return summaries with additional inventory details. Defaults to &#x60;HIDE,&#x60; which returns only inventory summary totals. (optional)
     * @param  string $next_token A token that is used to retrieve the next page of results. The response includes &#x60;nextToken&#x60; when the number of results exceeds the specified &#x60;maxResults&#x60; value. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextToken&#x60; is null. Note that this operation can return empty pages. (optional)
     * @param  int $max_results Maximum number of results to return. (optional, default to 25)
     *
     * @throws \MPSolutions\AmznSellingPartnerApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509InventoryListing|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList|\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList, HTTP status code, HTTP response headers (array of strings)
     */
    public function listInventoryWithHttpInfo($sku = null, $sort_order = null, $details = null, $next_token = null, $max_results = 25)
    {
        $request = $this->listInventoryRequest($sku, $sort_order, $details, $next_token, $max_results);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509InventoryListing' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509InventoryListing', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 413:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509InventoryListing';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509InventoryListing',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listInventoryAsync
     *
     * @param  string $sku Filter by seller or merchant SKU for the item. (optional)
     * @param  string $sort_order Sort the response in &#x60;ASCENDING&#x60; or &#x60;DESCENDING&#x60; order. (optional)
     * @param  string $details Set to &#x60;SHOW&#x60; to return summaries with additional inventory details. Defaults to &#x60;HIDE,&#x60; which returns only inventory summary totals. (optional)
     * @param  string $next_token A token that is used to retrieve the next page of results. The response includes &#x60;nextToken&#x60; when the number of results exceeds the specified &#x60;maxResults&#x60; value. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextToken&#x60; is null. Note that this operation can return empty pages. (optional)
     * @param  int $max_results Maximum number of results to return. (optional, default to 25)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listInventoryAsync($sku = null, $sort_order = null, $details = null, $next_token = null, $max_results = 25)
    {
        return $this->listInventoryAsyncWithHttpInfo($sku, $sort_order, $details, $next_token, $max_results)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listInventoryAsyncWithHttpInfo
     *
     * @param  string $sku Filter by seller or merchant SKU for the item. (optional)
     * @param  string $sort_order Sort the response in &#x60;ASCENDING&#x60; or &#x60;DESCENDING&#x60; order. (optional)
     * @param  string $details Set to &#x60;SHOW&#x60; to return summaries with additional inventory details. Defaults to &#x60;HIDE,&#x60; which returns only inventory summary totals. (optional)
     * @param  string $next_token A token that is used to retrieve the next page of results. The response includes &#x60;nextToken&#x60; when the number of results exceeds the specified &#x60;maxResults&#x60; value. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextToken&#x60; is null. Note that this operation can return empty pages. (optional)
     * @param  int $max_results Maximum number of results to return. (optional, default to 25)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listInventoryAsyncWithHttpInfo($sku = null, $sort_order = null, $details = null, $next_token = null, $max_results = 25)
    {
        $returnType = '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509InventoryListing';
        $request = $this->listInventoryRequest($sku, $sort_order, $details, $next_token, $max_results);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listInventory'
     *
     * @param  string $sku Filter by seller or merchant SKU for the item. (optional)
     * @param  string $sort_order Sort the response in &#x60;ASCENDING&#x60; or &#x60;DESCENDING&#x60; order. (optional)
     * @param  string $details Set to &#x60;SHOW&#x60; to return summaries with additional inventory details. Defaults to &#x60;HIDE,&#x60; which returns only inventory summary totals. (optional)
     * @param  string $next_token A token that is used to retrieve the next page of results. The response includes &#x60;nextToken&#x60; when the number of results exceeds the specified &#x60;maxResults&#x60; value. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextToken&#x60; is null. Note that this operation can return empty pages. (optional)
     * @param  int $max_results Maximum number of results to return. (optional, default to 25)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listInventoryRequest($sku = null, $sort_order = null, $details = null, $next_token = null, $max_results = 25)
    {
        if ($max_results !== null && $max_results > 200) {
            throw new \InvalidArgumentException('invalid value for "$max_results" when calling Awd20240509AwdApi.listInventory, must be smaller than or equal to 200.');
        }
        if ($max_results !== null && $max_results < 1) {
            throw new \InvalidArgumentException('invalid value for "$max_results" when calling Awd20240509AwdApi.listInventory, must be bigger than or equal to 1.');
        }


        $resourcePath = '/awd/2024-05-09/inventory';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($sku)) {
            $sku = ObjectSerializer::serializeCollection($sku, '', true);
        }
        if ($sku !== null) {
            $queryParams['sku'] = $sku;
        }
        // query params
        if (is_array($sort_order)) {
            $sort_order = ObjectSerializer::serializeCollection($sort_order, '', true);
        }
        if ($sort_order !== null) {
            $queryParams['sortOrder'] = $sort_order;
        }
        // query params
        if (is_array($details)) {
            $details = ObjectSerializer::serializeCollection($details, '', true);
        }
        if ($details !== null) {
            $queryParams['details'] = $details;
        }
        // query params
        if (is_array($next_token)) {
            $next_token = ObjectSerializer::serializeCollection($next_token, '', true);
        }
        if ($next_token !== null) {
            $queryParams['nextToken'] = $next_token;
        }
        // query params
        if (is_array($max_results)) {
            $max_results = ObjectSerializer::serializeCollection($max_results, '', true);
        }
        if ($max_results !== null) {
            $queryParams['maxResults'] = $max_results;
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $headers = array_merge(
            $headerParams,
            $headers
        );

        ksort($queryParams);
        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        $method = 'GET';
        return new Request(
            $method,
            $resourcePath,
            $headers,
            $query,
            $httpBody,
            $this->config
        );
    }

    /**
     * Operation updateInbound
     *
     * @param  string $order_id The ID of the inbound order that you want to update. (required)
     * @param  \MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509InboundOrder $body Represents an AWD inbound order. (required)
     *
     * @throws \MPSolutions\AmznSellingPartnerApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateInbound($order_id, $body)
    {
        $this->updateInboundWithHttpInfo($order_id, $body);
    }

    /**
     * Operation updateInboundWithHttpInfo
     *
     * @param  string $order_id The ID of the inbound order that you want to update. (required)
     * @param  \MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509InboundOrder $body Represents an AWD inbound order. (required)
     *
     * @throws \MPSolutions\AmznSellingPartnerApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateInboundWithHttpInfo($order_id, $body)
    {
        $request = $this->updateInboundRequest($order_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateInboundAsync
     *
     * @param  string $order_id The ID of the inbound order that you want to update. (required)
     * @param  \MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509InboundOrder $body Represents an AWD inbound order. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateInboundAsync($order_id, $body)
    {
        return $this->updateInboundAsyncWithHttpInfo($order_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateInboundAsyncWithHttpInfo
     *
     * @param  string $order_id The ID of the inbound order that you want to update. (required)
     * @param  \MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509InboundOrder $body Represents an AWD inbound order. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateInboundAsyncWithHttpInfo($order_id, $body)
    {
        $returnType = '';
        $request = $this->updateInboundRequest($order_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateInbound'
     *
     * @param  string $order_id The ID of the inbound order that you want to update. (required)
     * @param  \MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509InboundOrder $body Represents an AWD inbound order. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateInboundRequest($order_id, $body)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling updateInbound'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateInbound'
            );
        }

        $resourcePath = '/awd/2024-05-09/inboundOrders/{orderId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $headers = array_merge(
            $headerParams,
            $headers
        );

        ksort($queryParams);
        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        $method = 'PUT';
        return new Request(
            $method,
            $resourcePath,
            $headers,
            $query,
            $httpBody,
            $this->config
        );
    }

    /**
     * Operation updateInboundShipmentTransportDetails
     *
     * @param  string $shipment_id The shipment ID. (required)
     * @param  \MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509TransportationDetails $body Transportation details for the shipment. (required)
     *
     * @throws \MPSolutions\AmznSellingPartnerApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateInboundShipmentTransportDetails($shipment_id, $body)
    {
        $this->updateInboundShipmentTransportDetailsWithHttpInfo($shipment_id, $body);
    }

    /**
     * Operation updateInboundShipmentTransportDetailsWithHttpInfo
     *
     * @param  string $shipment_id The shipment ID. (required)
     * @param  \MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509TransportationDetails $body Transportation details for the shipment. (required)
     *
     * @throws \MPSolutions\AmznSellingPartnerApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateInboundShipmentTransportDetailsWithHttpInfo($shipment_id, $body)
    {
        $request = $this->updateInboundShipmentTransportDetailsRequest($shipment_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateInboundShipmentTransportDetailsAsync
     *
     * @param  string $shipment_id The shipment ID. (required)
     * @param  \MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509TransportationDetails $body Transportation details for the shipment. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateInboundShipmentTransportDetailsAsync($shipment_id, $body)
    {
        return $this->updateInboundShipmentTransportDetailsAsyncWithHttpInfo($shipment_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateInboundShipmentTransportDetailsAsyncWithHttpInfo
     *
     * @param  string $shipment_id The shipment ID. (required)
     * @param  \MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509TransportationDetails $body Transportation details for the shipment. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateInboundShipmentTransportDetailsAsyncWithHttpInfo($shipment_id, $body)
    {
        $returnType = '';
        $request = $this->updateInboundShipmentTransportDetailsRequest($shipment_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateInboundShipmentTransportDetails'
     *
     * @param  string $shipment_id The shipment ID. (required)
     * @param  \MPSolutions\AmznSellingPartnerApi\Models\Awd20240509\Awd20240509TransportationDetails $body Transportation details for the shipment. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateInboundShipmentTransportDetailsRequest($shipment_id, $body)
    {
        // verify the required parameter 'shipment_id' is set
        if ($shipment_id === null || (is_array($shipment_id) && count($shipment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipment_id when calling updateInboundShipmentTransportDetails'
            );
        }
        if (strlen($shipment_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$shipment_id" when calling Awd20240509AwdApi.updateInboundShipmentTransportDetails, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateInboundShipmentTransportDetails'
            );
        }

        $resourcePath = '/awd/2024-05-09/inboundShipments/{shipmentId}/transport';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($shipment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer::toPathValue($shipment_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $headers = array_merge(
            $headerParams,
            $headers
        );

        ksort($queryParams);
        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        $method = 'PUT';
        return new Request(
            $method,
            $resourcePath,
            $headers,
            $query,
            $httpBody,
            $this->config
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
